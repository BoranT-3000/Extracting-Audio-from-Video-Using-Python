# -*- coding: utf-8 -*-
"""Untitled27.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L_enKIGW-bXbv5gN9sjps3rbtHh0CcEf
"""

############################################################################################

import subprocess

def extract_audio(input_video_path, output_audio_path):
    try:
      #libmp3lame codec'ini kullanarak MP3 formatında ses dosyasını oluşturacaktır
      command = ['ffmpeg', '-i', input_video_path, '-vn', '-acodec', 'libmp3lame', '-ar', '44100', output_audio_path]
      subprocess.run(command)
      print("Conversion completed!")
    except subprocess.CalledProcessError as e:
      raise RuntimeError(f"ffmpeg failed with error: {e}")

# Örnek kullanım
extract_audio('/content/geeksforgeeks.mp4', '/content/geeksforgeeks.mp3')

############################################################################################

import subprocess

video_path = "/content/Never Gonna Give You Up.mp4"
output_audio_path = "subprocess_sesdosyasi.mp3"

# subprocess.call(['ffmpeg', '-i', video_path, '-vn', '-acodec', 'pcm_s16le', '-ar', '44100', output_audio_path])

# libmp3lame codec'ini kullanarak MP3 formatında ses dosyasını oluşturacaktır
subprocess.call(['ffmpeg', '-i', video_path, '-vn', '-acodec', 'libmp3lame', '-ar', '44100', output_audio_path])

############################################################################################

import subprocess

def convert_video_to_audio(video_file_path, audio_file_path):
    command = "ffmpeg -i {} -vn -ar 44100 -ac 2 -b:a 192k {}".format(video_file_path, audio_file_path)
    subprocess.call(command, shell=True)

video_file = "/path/to/your/video.mp4"
audio_file = "/path/to/output/audio.mp3"

convert_video_to_audio(video_file, audio_file)

'''
- `-i`: Girdi dosyasını belirtir.
- `-vn`: FFmpeg`e video kaydını devre dışı bırakmasını söyler.
- `-ar`: Ses örnekleme frekansını ayarlar (bu durumda 44100 Hz).
- ac`: Ses kanallarının sayısını ayarlar (stereo ses için 2).
- b:a`: Ses bit hızını ayarlar (burada 192k).


  -vn: Bu seçenek video kaydını devre dışı bırakır. Multimedya dosyasının yalnızca ses
  bileşeniyle ilgilendiğimizde yardımcı olur.

  -ar: Ses örnekleme frekansı. Yaygın olarak kullanılan değerler 22050, 44100 ve 48000 Hz'dir.
  Bu sayı ne kadar yüksek olursa, ses kalitesi o kadar iyi olur ve ortaya çıkan dosya o kadar büyük olur.

  -ac: Ses kanalı sayısı: Ses kanallarının sayısı. Değer tipik olarak mono için 1 ve stereo için 2'dir.

  -b:a: Ses bit hızı. Daha yüksek bir bit hızı daha yüksek ses kalitesi ve daha büyük bir dosya ile sonuçlanır.
    Yaygın değerler 128k, 192k, 256k ve 320k'dır. 'k' saniye başına kilobit anlamına gelir.

'''

############################################################################################

import os
import subprocess

def convert_video_to_audio(video_file_path, audio_file_path, ar=44100, ac=2, b_a="192k"):
    if not os.path.isfile(video_file_path):
        print(f"The video file {video_file_path} does not exist.")
        return

    command = f"ffmpeg -i {video_file_path} -vn -ar {ar} -ac {ac} -b:a {b_a} {audio_file_path}"
    try:
        subprocess.check_output(command, stderr=subprocess.STDOUT, shell=True)
        print(f"Successfully converted {video_file_path} to {audio_file_path}")
    except subprocess.CalledProcessError as e:
        print(f"An error occurred while converting {video_file_path} to {audio_file_path}")
        print(f"Error message: {e.output.decode()}")

video_file = "/path/to/your/video.mp4"
audio_file = "/path/to/output/audio.mp3"

# High-quality mono audio
convert_video_to_audio(video_file, audio_file, ar=48000, ac=1, b_a="320k")

############################################################################################

import IPython.display as ipd
import subprocess
import time
import os, sys

def convert_video_to_audio_ffmpeg(video_file:str, output_ext:str="mp3")->str:
    """Converts video to audio directly using `ffmpeg` command
    with the help of subprocess module"""
    filename, ext = os.path.splitext(video_file)
    output_file = f"{filename}.{output_ext}"
    start_time = time.time()
    subprocess.call(["ffmpeg", "-y", "-i", video_file,output_file],
                    stdout=subprocess.DEVNULL,
                    stderr=subprocess.STDOUT)
    elapsed_time = time.time() - start_time

    print(f"Conversion completed. Time taken: {elapsed_time:.2f} seconds")
    return output_file

video_file= "/content/video.mp4"
output_file = convert_video_to_audio_ffmpeg(video_file)
ipd.Audio(output_file)

############################################################################################

import IPython.display as ipd
import subprocess
import time
import os, sys
import logging

# Logging yapılandırması
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


def convert_video_to_audio_ffmpeg(video_file:str, output_ext:str="mp3")->str:
    """Converts video to audio directly using `ffmpeg` command
    with the help of subprocess module"""

    # Check if input file exists
    if not os.path.isfile(video_file):
        logging.error(f"The file {video_file} does not exist.")
        raise FileNotFoundError(f"The file {video_file} does not exist.")

    # Check for valid output extension
    valid_extensions = {"mp3", "wav", "aac", "flac", "ogg"}
    if output_ext not in valid_extensions:
        logging.error(f"Invalid output extension '{output_ext}'. Valid options are: {valid_extensions}")
        raise ValueError(f"Invalid output extension '{output_ext}'. Valid options are: {valid_extensions}")


    filename, ext = os.path.splitext(video_file)
    output_file = f"{filename}.{output_ext}"
    start_time = time.time()

    try:
        subprocess.call(["ffmpeg", "-y", "-i", video_file,output_file],
                    stdout=subprocess.DEVNULL,
                    stderr=subprocess.STDOUT)
        logging.info("Conversion completed!")

    except subprocess.CalledProcessError as e:
        logging.error(f"ffmpeg failed with error: {e}")
        raise RuntimeError(f"ffmpeg failed with error: {e}")

    elapsed_time = time.time() - start_time
    print(f"Conversion completed. Time taken: {elapsed_time:.2f} seconds")
    return output_file

# if __name__ == "__main__":
#     vf = "/content/geeksforgeeks.mp4"
#     output_file = convert_video_to_audio_ffmpeg(vf)
#     ipd.Audio(output_file)

video_file = "/content/geeksforgeeks.mp4"
output_file = convert_video_to_audio_ffmpeg(video_file)
ipd.Audio(output_file)

############################################################################################
!pip install ffmpeg-python
############################################################################################

import ffmpeg

# Load the video file
input_file = ffmpeg.input('video.mp4')

# Extract the audio and save it as an MP3 file
input_file.output('audio.mp3', acodec='mp3').run()

############################################################################################

import ffmpeg
import os
import logging

# Logging yapılandırması
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def extract_audio_fffmpeg(input_video_name):
    """Extracts audio from a video file and saves it as a .wav file."""

    # Check if the input video file exists
    if not os.path.isfile(input_video_name):
        logging.error(f"The file {input_video_name} does not exist.")
        raise FileNotFoundError(f"The file {input_video_name} does not exist.")

    # Define the output audio file name
    extracted_audio = f"audio-{os.path.splitext(os.path.basename(input_video_name))[0]}.wav"

    # Create the ffmpeg stream to extract audio
    try:
        logging.info(f"Extracting audio from video: {input_video_name}")
        stream = ffmpeg.input(input_video_name)
        stream = ffmpeg.output(stream, extracted_audio)
        ffmpeg.run(stream, overwrite_output=True)
        logging.info(f"Audio extracted successfully to {extracted_audio}")
    except ffmpeg.Error as e:
        logging.error(f"ffmpeg error: {e.stderr.decode()}")
        raise RuntimeError(f"ffmpeg error: {e.stderr.decode()}")

    return extracted_audio

# Örnek kullanım
input_video = "/content/video_name.mp4"
output_audio = extract_audio_fffmpeg(input_video)
logging.info(f"Output audio file: {output_audio}")

############################################################################################